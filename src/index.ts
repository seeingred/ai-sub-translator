import { app, BrowserWindow, ipcMain, safeStorage } from 'electron';
import {loadFile} from './file/load';
import { getVideoInfo, initializeFFmpeg } from './videoExtraction/ffmpeg';
import { extractSubtitle } from './videoExtraction/subtitleExtractor';
import * as jayson from 'jayson';
import * as fs from 'fs';
import * as path from 'path';
import handleSubtitleServer from './handleSubtitleServer';
import * as http from 'http';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

// Check if running in headless mode
// Can be forced with --headless flag or auto-detected on Linux without display
const isHeadless = process.argv.includes('--headless') ||
                  (process.platform === 'linux' && !process.env.DISPLAY);

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 600,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            webSecurity: true,
        },
        icon: './images/icon.png'
    });

    // Set Content Security Policy
    mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
        callback({
            responseHeaders: {
                ...details.responseHeaders,
                'Content-Security-Policy': [
                    "connect-src 'self' https://generativelanguage.googleapis.com"
                ]
            }
        });
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools only if the app is not packaged.
    if (!app.isPackaged) {
        mainWindow.webContents.openDevTools();
    }

    ipcMain.handle('progress', (event, progress: number) => {
        mainWindow.setProgressBar(progress);
    });

    ipcMain.handle('set-title', (event, title: string) => {
        mainWindow.setTitle(title);
    });

    ipcMain.handle('file-load', async (event, window: BrowserWindow) => {
        return loadFile(window);
    });

    ipcMain.handle('encrypt', async(event, text: string) => {
        const encrypted = safeStorage.encryptString(text);
        return encrypted.toString('hex');
    });

    ipcMain.handle('decrypt', async (event, hex: string) => {
        return safeStorage.decryptString(Buffer.from(hex, 'hex'));
    });

    ipcMain.handle('get-video-info', async (event, path: string) => {
        return getVideoInfo(path);
    });

    ipcMain.handle('initialize-ffmpeg', async (event, path: string) => {
        return initializeFFmpeg({});
    });

    ipcMain.handle('extract-subtitle', async (event, videoPath: string, subtitleIndex: number) => {
        return extractSubtitle(videoPath, subtitleIndex);
    });
};

// JSON-RPC Server setup for headless mode
const setupJsonRpcServer = () => {
    const server = jayson.server({
        // Initialize FFmpeg
        'ffmpeg.initialize': async (args: any[], callback: any) => {
            try {
                const result = await initializeFFmpeg({});
                callback(null, { path: result });
            } catch (error) {
                callback({ code: -32000, message: error.message });
            }
        },

        // Get video info and subtitles
        'video.getInfo': async (args: any[], callback: any) => {
            try {
                const [videoPath] = args;
                if (!videoPath) {
                    callback({ code: -32602, message: 'Invalid params: videoPath required' });
                    return;
                }
                const info = await getVideoInfo(videoPath);
                callback(null, info);
            } catch (error) {
                callback({ code: -32000, message: error.message });
            }
        },

        // Extract subtitle from video
        'subtitle.extract': async (args: any[], callback: any) => {
            try {
                const [videoPath, subtitleIndex] = args;
                if (!videoPath || subtitleIndex === undefined) {
                    callback({ code: -32602, message: 'Invalid params: videoPath and subtitleIndex required' });
                    return;
                }
                const result = await extractSubtitle(videoPath, subtitleIndex);
                callback(null, result);
            } catch (error) {
                callback({ code: -32000, message: error.message });
            }
        },

        // Translate subtitle file
        'subtitle.translate': async (args: any[], callback: any) => {
            try {
                const [options] = args;
                if (!options || !options.text || !options.apiKey || !options.language) {
                    callback({ code: -32602, message: 'Invalid params: text, apiKey, and language required' });
                    return;
                }

                // Set default values
                const props = {
                    text: options.text,
                    apiKey: options.apiKey,
                    language: options.language,
                    pieceNameOrContext: options.pieceNameOrContext || '',
                    batchSize: options.batchSize || 50,
                    model: options.model || 'gemini-1.5-flash-8b'
                };

                const result = await handleSubtitleServer(props, (progress) => {
                    console.log(`Progress: ${Math.round(progress * 100)}%`);
                });
                callback(null, { translatedText: result });
            } catch (error) {
                callback({ code: -32000, message: error.message });
            }
        },

        // Load subtitle file from disk
        'subtitle.loadFile': async (args: any[], callback: any) => {
            try {
                const [filePath] = args;
                if (!filePath) {
                    callback({ code: -32602, message: 'Invalid params: filePath required' });
                    return;
                }

                if (!fs.existsSync(filePath)) {
                    callback({ code: -32603, message: 'File not found' });
                    return;
                }

                const content = fs.readFileSync(filePath, 'utf-8');
                callback(null, { content, path: filePath });
            } catch (error) {
                callback({ code: -32000, message: error.message });
            }
        },

        // Save translated subtitle
        'subtitle.save': async (args: any[], callback: any) => {
            try {
                const [filePath, content] = args;
                if (!filePath || !content) {
                    callback({ code: -32602, message: 'Invalid params: filePath and content required' });
                    return;
                }

                fs.writeFileSync(filePath, content, 'utf-8');
                callback(null, { success: true, path: filePath });
            } catch (error) {
                callback({ code: -32000, message: error.message });
            }
        },

        // Health check
        'ping': (args: any[], callback: any) => {
            callback(null, 'pong');
        },

        // Get server info
        'info': (args: any[], callback: any) => {
            callback(null, {
                name: 'AI Subtitle Translator Server',
                version: '0.2.0',
                headless: true,
                platform: process.platform,
                arch: process.arch
            });
        }
    });

    const port = parseInt(process.env.API_PORT || '9090', 10);
    const httpServer: any = server.http();
    httpServer.listen(port, () => {
        console.log('==========================================');
        console.log('AI Subtitle Translator - Headless Server');
        console.log('==========================================');
        console.log(`JSON-RPC server listening on port ${port}`);
        console.log('Available methods:');
        console.log('  - ffmpeg.initialize');
        console.log('  - video.getInfo');
        console.log('  - subtitle.extract');
        console.log('  - subtitle.translate');
        console.log('  - subtitle.loadFile');
        console.log('  - subtitle.save');
        console.log('  - ping');
        console.log('  - info');
        console.log('==========================================');

        // Initialize FFmpeg on startup
        console.log('Initializing FFmpeg...');
        initializeFFmpeg({}).then(path => {
            console.log(`FFmpeg initialized at: ${path}`);
        }).catch(err => {
            console.error('Failed to initialize FFmpeg:', err);
        });
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    if (isHeadless) {
        console.log('Running in headless mode...');
        setupJsonRpcServer();
    } else {
        createWindow();
    }
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    // In headless mode, keep the app running
    if (!isHeadless && process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (!isHeadless && BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
